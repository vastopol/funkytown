rlwrap sml
will wrap and keep text so can use arrows

strongly typed language

semicolon is terminator

all things are expressions, no statements
variables defined with "val"

val it = 3+4;

+ - / *

division only for reals

to divide integers use "div"

unary minus/negation "~"

string cat is "^"

equality sign for comparison "="
there is no equality for reals
not equal "<>"

logical and is "andalso"

logical or is "orelse"

if then else like ternary operator
must have all parts

if 3<4 then "hi" else "nope";

basic types

tuples
(1,3,"hi"true)

val y = (1,2,"g",false)

to access from tuple use

#1 y

lists use []

val it = [1,2];

type predicates in postfix

nil is empty lisr
[] is nil

list concatenation is @

[1] @ [2]


can have lists of lists

:: is cons
cons is right associative
construct a list by takes element and list, puts element on front of list

hd is head of list
tl is tail of list
null is predicate takes in list, is true if list is nil

function calls are by juxtaposition
all functions are unary
if need multiple args then construct tuple


explode and implode
explode takes string to list of chars
implode takes char list to string

declare functions with "fun"
automatic type deduction

TYPES
*    is for crossing stuff for tuples
list is postfixed
->   is for function type description
'a   is polymorphic type
''a  is any type which supports equality comparisons


fun firstChar s = hd ( explode s );
fun secondChar s = hd (tl ( explode s));
fun fact n = if n=0 then 1 else n * (fact ( n-1 ));
fun len x = if null x then 0 else 1 + ( len ( tl x ));
fun listSum x = if null x then 0 else hd x + listSum (tl x);
fun revList x = if null x then nil
                          else revList (tl x)) @ [hd x];

fun myadd (a,b) = a+b;           this defaults to int addition
fun myadd (a : real, b) = a+b;    this tells it use real
fun myadd (a : real, b : real) : real = a+b;    this tells it use real

patterns
"\" is the or for patterns
"_" matches anything

fun f 0 = "none"
|   f 1 = "one"
|   f _ = "some";

example:

fun revList [] = []
|   revlist x = (revList (tl x)) @ [hd x];

example:

fun numTrue [] = 0
|   numTrue x = if (hd x) then 1+(numTrue (tl x)) else numTrue (x tl);

fun numTrue [] = 0
|   numTrue (true::xs) = 1 + (numTrue xs)
|   numTrue (false::xs) = numTrue xs;


says if the list can be constructed from consing true and another list xs list then 1 + (numTrue xs)
says if the list can be constructed from consing false and another list xs list then (numTrue xs)

fun numTrue [] = 0
|   numTrue (x::xs) = (if x then 1 else 0) + (numTrue xs);

example:

want type int*int list -> int list

fun addtoall (_,[]) = []
|   addtoall (x,y::ys) = (x+y) :: (addtoall (x,ys));


ex:

fun addPairs [] = 0
|   addPairs (x::y::rest) = (x+y) :: (addPairs rest);



